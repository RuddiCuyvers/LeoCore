(function (n) {
    n.WGK = {};
    n.WGK.ButtonKeys = {
        enterKey: 13
    };
    n.WGK.UserCode = {
        blankCode: "_BLNK",
        zeroCode: "0",
        allCode: "_ALL"
    };
    n.WGK.Literals = {
        errorCap: "Fout",
        selectButton: "Selecteren",
        editButton: "Bewerken",
        deleteButton: "Verwijderen",
        detailButton: "Detail",
        cancelButton: "Annuleren",
        searchButton: "Zoeken",
        printButton: "Afdrukken",
        blankLine: "----Kiezen----",
        validationSummary: "Er is een fout opgetreden",
        booleanYes: "Ja",
        booleanNo: "Nee"
    };
    n.WGK.isNullOrEmptyOrBlankCode = function (t) {
        return t == null || t == "" || t == n.WGK.UserCode.blankCode
    };
    n.WGK.isNullOrEmptyOrZeroCode = function (t) {
        return t == null || t == "" || t == n.WGK.UserCode.zeroCode
    };
    n.WGK.formatGuidString = function (t) {
        return t == null || t === "" || typeof t != "string" ? "" : n.trim(t).toLowerCase().replace(/^{|}$/g, "")
    };
    n.WGK.ajaxErrorHtml = function (t, i, r) {
        var u = "<b>" + (r ? r : n.WGK.Literals.validationSummary) + "<\/b>";
        return t.responseText && (u += "<div>" + t.responseText + "<\/div>"), u
    };
    n.WGK.errorHtml = function (t, i) {
        var r = "<b>" + (i ? i : n.WGK.Literals.validationSummary) + "<\/b>";
        return t && (r += "<div>" + t + "<\/div>"), r
    };
    n.WGK.dateGetDaysInMonth = function (t) {
        return [31, n.WGK.dateIsLeapYear(t) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][t.getMonth()]
    };
    n.WGK.dateIsLeapYear = function (n) {
        var t = n.getFullYear();
        return t % 4 == 0 && t % 100 != 0 || t % 400 == 0
    };
    n.WGK.dateAddDays = function (n, t) {
        var i = new Date(n);
        return i.setDate(n.getDate() + t), i
    };
    n.WGK.dateAddMonths = function (t, i) {
        var r = new Date(t);
        return r.setDate(1), r.setMonth(t.getMonth() + i), r.setDate(Math.min(t.getDate(), n.WGK.dateGetDaysInMonth(r))), r
    };
    n.WGK.dynamicInfoSummary = function (t) {
        var i = "";
        return n("label", t).each(function () {
            var f = n(this),
                o = f.text(),
                e = f.attr("for"),
                u = "",
                r = n("#" + e + "_Description", t);
            r.length !== 0 ? u = r.val() : (r = n("#" + e, t), u = r.prop("tagName") === "SELECT" ? n("option:selected", r).text() : r.prop("type") === "checkbox" ? r.prop("checked") ? n.WGK.Literals.booleanYes : n.WGK.Literals.booleanNo : r.filter(":radio").length > 0 ? r.filter(":radio:checked").next("span").text() : r.val());
            i.length != 0 && (i += "\r\n");
            i += o;
            i += ": ";
            i += u
        }), i
    };
    n.WGK.autoComplete = function (t, i, r, u, f, e, o, s, h) {
        if (i != null) {
            var c = n("#" + i);
            c.data("last_val", c.val())
        } else n("#" + t).data("clear_val", !1);
        n("#" + t).autocomplete({
            source: function (u, c) {
                var l = {
                    pStartsWith: u.term,
                    pSoftDeleted: f
                };
                s != null && n.extend(l, s);
                h != null && (l = h(l));
                n.ajax({
                    url: r,
                    dataType: "json",
                    data: l,
                    success: function (r) {
                        e == !0 && n.isArray(r) && (r.length == 1 || r.length > 1 && r[0].label.toLowerCase() == n("#" + t).val().toLowerCase() ? n.WGK.autoCompleteSelect(r[0], i, t, o) : n.WGK.autoCompleteClear(i, t, o));
                        c(r)
                    },
                    error: function (i, r, u) {
                        n("#ErrorMessage", n("#" + t).closest("form")).html(n.WGK.ajaxErrorHtml(i, r, u))
                    }
                })
            },
            minLength: u,
            open: function () {
                n(this).removeClass("ui-corner-all").addClass("ui-corner-top")
            },
            close: function () {
                n(this).removeClass("ui-corner-top").addClass("ui-corner-all")
            },
            focus: function (t, i) {
                return n(this).val(i.item.label), !1
            },
            search: function () {
                e == !0 && n.WGK.autoCompleteClear(i, t, o)
            },
            change: function () {
                var r;
                e == !0 && (n(this).val().length < u && n.WGK.autoCompleteClear(i, t, o), i != null ? (r = n("#" + i), (r.val() == null || r.val() == "") && n(this).val("")) : n(this).data("clear_val") == !0 && (n(this).data("clear_val", !1), n(this).val("")));
                i != null ? (r = n("#" + i), r.val() != r.data("last_val") && (r.data("last_val", r.val()), r.change())) : n(this).change()
            },
            select: function (r, u) {
                return n.WGK.autoCompleteSelect(u.item, i, t, o), !1
            }
        })
    };
    n.WGK.autoCompleteSelect = function (t, i, r, u) {
        u != null ? (i == null && n("#" + r).data("clear_val", !1), u(t, r, i)) : (n("#" + r).val(t.label), i != null ? n("#" + i).val(t.value) : n("#" + r).data("clear_val", !1))
    };
    n.WGK.autoCompleteClear = function (t, i, r) {
        t != null ? n("#" + t).val("") : n("#" + i).data("clear_val", !0);
        r != null && r(null, i, t)
    };
    n.WGK.autoCompleteAlt = function (t, i, r, u, f, e, o, s, h) {
        i != null ? i.data("last_val", i.val()) : t.data("clear_val", !1);
        t.autocomplete({
            source: function (u, c) {
                var l = {
                    pStartsWith: u.term,
                    pSoftDeleted: f
                };
                s != null && n.extend(l, s);
                h != null && (l = h(l));
                n.ajax({
                    url: r,
                    dataType: "json",
                    data: l,
                    success: function (r) {
                        e == !0 && n.isArray(r) && (r.length == 1 || r.length > 1 && r[0].label.toLowerCase() == t.val().toLowerCase() ? n.WGK.autoCompleteSelectAlt(r[0], i, t, o) : n.WGK.autoCompleteClearAlt(i, t, o));
                        c(r)
                    },
                    error: function (i, r, u) {
                        n("#ErrorMessage", t.closest("form")).html(n.WGK.ajaxErrorHtml(i, r, u))
                    }
                })
            },
            minLength: u,
            open: function () {
                n(this).removeClass("ui-corner-all").addClass("ui-corner-top")
            },
            close: function () {
                n(this).removeClass("ui-corner-top").addClass("ui-corner-all")
            },
            focus: function (t, i) {
                return n(this).val(i.item.label), !1
            },
            search: function () {
                e == !0 && n.WGK.autoCompleteClearAlt(i, t, o)
            },
            change: function () {
                e == !0 && (n(this).val().length < u && n.WGK.autoCompleteClearAlt(i, t, o), i != null ? (i.val() == null || i.val() == "") && n(this).val("") : n(this).data("clear_val") == !0 && (n(this).data("clear_val", !1), n(this).val("")));
                i != null ? i.val() != i.data("last_val") && (i.data("last_val", i.val()), i.change()) : n(this).change()
            },
            select: function (r, u) {
                return n.WGK.autoCompleteSelectAlt(u.item, i, t, o), !1
            }
        })
    };
    n.WGK.autoCompleteSelectAlt = function (n, t, i, r) {
        r != null ? (t == null && i.data("clear_val", !1), r(n, i, t)) : (i.val(n.label), t != null ? t.val(n.value) : i.data("clear_val", !1))
    };
    n.WGK.autoCompleteClearAlt = function (n, t, i) {
        n != null ? n.val("") : t.data("clear_val", !0);
        i != null && i(null, t, n)
    };
    n.WGK.gridModus = [];
    n.WGK.gridDataSource = [];
    n.WGK.gridLastEditID = [];
    n.WGK.gridDelIDs = [];
    n.WGK.gridLastAddID = [];
    n.WGK.gridErrorIDs = [];
    n.WGK.gridSelectedIDs = [];
    n.WGK.gridOnSelectFunc = [];
    n.WGK.gridOnEditFunc = [];
    n.WGK.gridOnCloseFunc = [];
    n.WGK.gridBeforeDeleteFunc = [];
    n.WGK.gridOnDeleteFunc = [];
    n.WGK.gridOpenSearchFunc = [];
    n.WGK.gridOpenCustomFormFunc = [];
    n.WGK.gridOpenDetailUrl = [];
    n.WGK.gridOpenDetailColumnID = [];
    n.WGK.gridOpenDetailAsLink = [];
    n.WGK.GridModusEnum = {
        view: 0,
        editonly: 1,
        select: 2,
        deleteonly: 4,
        editanddelete: 5
    };
    n.WGK.gridLoadComplete = function (t, i) {
        for (var r, e = n("#" + t), f = e.getDataIDs(), u = 0; u < f.length; u++) r = f[u], n.WGK.gridAddRowActionButtons(t, r), n.inArray(parseInt(r), n.WGK.gridErrorIDs[t]) !== -1 && n("#" + t + " tr").filter("#" + r).addClass("errorRow");
        i != null && i(t)
    };
    n.WGK.gridEditRow = function (t, i, r) {
        if (i && i != n.WGK.gridLastEditID[t]) {
            n.WGK.gridSaveLastEditRow(t, function (t) {
                ce = "<span title='" + n.WGK.Literals.cancelButton + "' style='float: left; cursor: hand' class='ui-icon ui-icon-cancel' onclick='$.WGK.gridRestoreRow(\"" + t + '","' + i + "\");' />";
                var u = n("#" + t);
                u.setRowData(i, {
                    sav: ce
                });
                u.editRow(i, !0, function (i) {
                    n.WGK.gridOnEdit(t, i)
                }, null, null, null, function (i) {
                    n.WGK.gridAfterCloseRow(t, i)
                }, null, function (i) {
                    n.WGK.gridAfterCloseRow(t, i)
                });
                r != null && r(t, i)
            });
            return
        }
        r != null && r(t, i)
    };
    n.WGK.gridRestoreRow = function (t, i) {
        var r = n("#" + t);
        r.restoreRow(i);
        n.WGK.gridAfterCloseRow(t, i)
    };
    n.WGK.gridAfterCloseRow = function (t, i) {
        if (i) {
            n.WGK.gridLastEditID[t] = null;
            var r = n("#" + t);
            r.setRowData(i, {
                sav: ""
            });
            n.WGK.gridOnCloseFunc[t] && n.WGK.gridOnCloseFunc[t](i)
        }
    };
    n.WGK.gridSaveLastEditRow = function (t, i) {
        if (n.WGK.gridLastEditID[t] != null) {
            var r = n("#" + t);
            if (n(r.getInd(n.WGK.gridLastEditID[t], !0)).attr("editable") === "1") {
                r.saveRow(n.WGK.gridLastEditID[t], null, null, null, function (r) {
                    n.WGK.gridAfterCloseRow(t, r);
                    i != null && i(t)
                });
                return
            }
        }
        i != null && i(t)
    };
    n.WGK._gridDeleteRow = function (t, i, r) {
        var u = n("#" + t);
        (r || confirm(n.jgrid.del.msg)) && (u.delRowData(i), n.WGK.gridDelIDs[t].push(i), n.WGK.gridOnDeleteFunc[t] && n.WGK.gridOnDeleteFunc[t](i))
    };
    n.WGK.gridDeleteRow = function (t, i, r) {
        n.WGK.gridBeforeDeleteFunc[t] ? n.WGK.gridBeforeDeleteFunc[t](i) === !0 && n.WGK._gridDeleteRow(t, i, r) : n.WGK._gridDeleteRow(t, i, r)
    };
    n.WGK.gridCancelAddRow = function (t, i) {
        var r = n("#" + t);
        r.delRowData(i)
    };
    n.WGK.gridCreateRow = function (t, i, r, u, f) {
        n.WGK.gridSaveLastEditRow(t, function (t) {
            var e, o, s;
            n.WGK.gridLastAddID[t]--;
            e = n.WGK.gridLastAddID[t];
            o = {};
            o[i] = e;
            s = n("#" + t);
            s.addRowData(e, o, u);
            n.WGK.gridAddRowActionButtons(t, e, !0);
            r || n.WGK.gridAddRowUpdateButtons(t, e);
            f && f(e);
            r || s.editRow(e, !0, function (i) {
                n.WGK.gridOnEdit(t, i)
            }, null, null, null, function (i) {
                n.WGK.gridAfterCloseRow(t, i)
            }, null, function (i) {
                n.WGK.gridCancelAddRow(t, i)
            })
        })
    };
    n.WGK.gridOnEdit = function (t, i) {
        n.WGK.gridLastEditID[t] = i;
        jQuery("#" + t + " tr#" + i).removeClass("errorRow");
        n.WGK.gridOnEditFunc[t] != null && n.WGK.gridOnEditFunc[t](i)
    };
    n.WGK.gridSubmit = function (t, i, r) {
        n.WGK.gridSaveLastEditRow(t, function (t) {
            for (var e, o, s, h = n("#" + t), u = h.getRowData(), f = 0; f < u.length; f++) e = u[f], delete e.del, delete e.sav;
            o = n.toJSON(u);
            n("#" + t + "_Data").val(o);
            s = n.toJSON(n.WGK.gridDelIDs[t]);
            n("#" + t + "_DelIDs").val(s);
            n("#" + t + "_LastAddID").val(n.WGK.gridLastAddID[t]);
            r(i)
        })
    };
    n.WGK.gridSelectRow = function (t, i, r) {
        r === !0 ? n.inArray(i, n.WGK.gridSelectedIDs[t]) === -1 && n.WGK.gridSelectedIDs[t].push(i) : n.inArray(i, n.WGK.gridSelectedIDs[t]) > -1 && (n.WGK.gridSelectedIDs[t] = n.grep(n.WGK.gridSelectedIDs[t], function (n) {
            return n !== i
        }));
        n.WGK.gridOnSelectFunc[t] != null && n.WGK.gridOnSelectFunc[t].call(this)
    };
    n.WGK.gridGetSelectedIDs = function (t) {
        return n.WGK.gridSelectedIDs[t]
    };
    n.WGK.gridGetSelectedIDsWithDescription = function (t, i) {
        var r = n("#" + t);
        return n.map(n.WGK.gridSelectedIDs[t], function (n) {
            var t = r.getRowData(n),
                u = t != null ? t[i] : "";
            return {
                id: n,
                description: u
            }
        })
    };
    n.WGK.gridSetOnSelectFunc = function (t, i) {
        n.WGK.gridOnSelectFunc[t] = i
    };
    n.WGK.gridIsRowInEditMode = function (t, i) {
        return n(n("#" + t).getInd(i, !0)).attr("editable") === "1"
    };
    n.WGK.gridAddRowActionButtons = function (t, i) {
        var r = "",
            e = n.WGK.gridOpenDetailUrl[t],
            o = n.WGK.gridOpenDetailColumnID[t],
            u = n.WGK.gridModus[t],
            f;
        u === n.WGK.GridModusEnum.select ? r += "<input type='checkbox' title='" + n.WGK.Literals.selectButton + "' style='float: left;' onclick='$.WGK.gridSelectRow.call(this, \"" + t + '","' + i + "\", this.checked);' />" : e != null && o != null && (n.WGK.gridOpenDetailAsLink[t] ? (f = n("#" + t).getCell(i, o), f && (r += "<a title='" + n.WGK.Literals.detailButton + "' style='float: left; cursor: hand' class='ui-icon ui-icon-extlink' target='_blank' href='" + e + f + "' />")) : r += "<span title='" + n.WGK.Literals.detailButton + "' style='float: left; cursor: hand' class='ui-icon ui-icon-extlink' onclick='$.WGK.gridOpenDetail(\"" + t + '", "' + i + "\");' />");
        u & n.WGK.GridModusEnum.deleteonly && (r += "<span title='" + n.WGK.Literals.deleteButton + "' style='float: left; cursor: hand' class='ui-icon ui-icon-trash' onclick='$.WGK.gridDeleteRow(\"" + t + '","' + i + "\");' />");
        u & n.WGK.GridModusEnum.editonly && (n.WGK.gridOpenSearchFunc[t] != null && (r += "<span title='" + n.WGK.Literals.searchButton + "' style='float: left; cursor: hand' class='ui-icon ui-icon-search' onclick='$.WGK.gridOpenSearch(\"" + t + '","' + i + "\");' />"), n.WGK.gridOpenCustomFormFunc[t] != null && (r += "<span title='" + n.WGK.Literals.editButton + "' style='float: left; cursor: hand' class='ui-icon ui-icon-pencil' onclick='$.WGK.gridOpenCustomForm(\"" + t + '","' + i + "\");' />"));
        n("#" + t).setRowData(i, {
            del: r
        })
    };
    n.WGK.gridAddRowUpdateButtons = function (t, i) {
        var r = "<span title='" + n.WGK.Literals.cancelButton + "' style='float: left; cursor: hand' class='ui-icon ui-icon-cancel' onclick='$.WGK.gridCancelAddRow(\"" + t + '","' + i + "\");' />";
        n("#" + t).setRowData(i, {
            sav: r
        })
    };
    n.WGK.gridOpenDetail = function (t, i) {
        var u = n.WGK.gridOpenDetailUrl[t],
            f = n.WGK.gridOpenDetailColumnID[t],
            r;
        u == null || f == null || n.WGK.gridIsRowInEditMode(t, i) || (r = n("#" + t).getCell(i, f), r && window.open(u + r))
    };
    n.WGK.gridOpenSearch = function (t, i) {
        var r = n.WGK.gridOpenSearchFunc[t];
        r != null && r(t, i)
    };
    n.WGK.gridOpenCustomForm = function (t, i) {
        var r = n.WGK.gridOpenCustomFormFunc[t];
        r != null && r(t, i)
    };
    n.WGK.gridReload = function (t, i) {
        n("#" + t).setGridParam({
            datatype: "json",
            page: 1,
            postData: i
        }).trigger("reloadGrid")
    };
    n.fn.disable = function () {
        return this.each(function () {
            this.disabled == null && (this.disabled = !0)
        })
    };
    n.validator.addMethod("requiredusercode", function (t) {
        return !n.WGK.isNullOrEmptyOrBlankCode(t)
    });
    n.validator.unobtrusive.adapters.addBool("requiredusercode");
    n.validator.addMethod("dayrange", function (n, t, i) {
        if (!n) return !0;
        var r = n.split(i.separator),
            u = new Date,
            f = new Date,
            e = new Date,
            o = new Date(r[2], r[1] - 1, r[0], e.getHours(), e.getMinutes(), e.getSeconds() + 5);
        return u.setDate(u.getDate() - parseInt(i.min)), f.setDate(f.getDate() + parseInt(i.max)), o >= u && o <= f
    });
    n.validator.unobtrusive.adapters.add("dayrange", ["min", "max", "dateseparator"], function (n) {
        var t = {
            min: n.params.min,
            max: n.params.max,
            separator: n.params.dateseparator
        };
        n.rules.dayrange = t;
        n.message && (n.messages.dayrange = n.message)
    });
    n.validator.addMethod("requiredemptyifrelatedfieldsempty", function (t, r, u) {
        var e, f, s, o, h;
        if (this.optional(r)) return !0;
        for (e = "", f = r.name.split("."), f.length > 1 && (s = f.slice(0, f.length - 1), e = s.join(".")), o = u.split(","), i = 0; i < o.length; i++)
            if (h = n("#" + e + "_" + o[i]), h.val() == "") return !1;
        return !0
    });
    n.validator.unobtrusive.adapters.addSingleVal("requiredemptyifrelatedfieldsempty", "relatedfields");
    n.validator.addMethod("requiredandnotequalto", function (n, t, i) {
        if (this.optional(t)) return !1;
        var r = i;
        return n == "" ? !1 : n == r ? !1 : !0
    });
    n.validator.unobtrusive.adapters.addSingleVal("requiredandnotequalto", "notequaltovalue");
    n.extend(n.validator.methods, {
        date: function (n, t) {
            return this.optional(t) || Globalize.parseDate(n) != null
        },
        number: function (n, t) {
            return this.optional(t) || !isNaN(Globalize.parseFloat(n))
        },
        range: function (n, t, i) {
            var r = Globalize.parseFloat(n);
            return this.optional(t) || r >= i[0] && r <= i[1]
        }
    });
    n.extend(n.jgrid.defaults, {
        jsonReader: {
            repeatitems: !1
        },
        ajaxGridOptions: {
            async: !1
        },
        altRows: !0,
        altclass: "altRow",
        autowidth: !0,
        height: "235",
        imgpath: "/Content/jqtheme/images",
        loadui: "disable",
        multiboxonly: !0,
        rowNum: 10,
        rowList: [10, 20, 50],
        viewrecords: !0
    });
    n.extend(n.ech.multiselect.prototype.options, {
        show: ["fade", 500],
        hide: ["blind", 250],
        selectedList: 4
    });
    //n.extend(n.ui.numeric.prototype.options, {
    //    format: "0",
    //    minWidth: 200,
    //    increment: 1,
    //    minValue: 0
    //});
    n.datepicker.setDefaults({
        showOn: "button"
    });
    n.extend(n.ui.dialog.prototype.options, {
        closeOnEscape: !1
    });
    n.extend(n.mask, {
        placeholder: " "
    })
})(jQuery);